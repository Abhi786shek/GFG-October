void solve(vector<vector<int> >& grid,int l,int n ,int m,int i, int j)

    {

        if(i<0 || i>=n || j<0 || j>=m || grid[i][j]!=l)

        {

            return ;

        }

        

        grid[i][j] += 1;

        solve(grid,l,n,m,i+1,j);

        solve(grid,l,n,m,i-1,j);

        solve(grid,l,n,m,i,j+1);

        solve(grid,l,n,m,i,j-1);

    }

    vector<int> numOfIslands(int n, int m, vector<vector<int>> &operators) {

        int k = operators.size();

        vector<int> ans;

        vector<vector<int>>vec(n,vector<int>(m,0));

        int l = 1;

        for(int i=0;i<k;i++)

        {

            int c = 0;

            vec[operators[i][0]][operators[i][1]] = l;

            for(int j = 0;j<n;j++)

            {

                for(int k = 0;k<m;k++)

                {

                    if(vec[j][k]==l)

                    {

                        solve(vec,l,n,m,j,k);

                        c++;

                    }

                }

            }

            l++;

            ans.push_back(c);

        }

        

        return ans;

    }
